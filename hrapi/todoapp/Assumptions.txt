1 For each request sent by front end client to server, following assumptions are made

    1. For each node in nodes list, nodeId must be present.
       nodeId will be UNIX based timestamp + uniqueId which needs to be send by front end client to the back end server.

    2. Client of this backend service is responsible for maintaining the state of all the nodes. On any change in the node on the
       client side, back end service will be called with the changed nodes.

    3. If node is root, then its parentId will be string "root". Else parentId will be the nodeId of the parent.
       For example If node y is of type LIST_ITEM or BLOB, then they must have parentId present in the request.
       Also parentId must be valid nodeId of node entity.

    4. All the timestamps related to the node will be send by front end. Following time stamps are required:
        a. created
        b. updated
        c. deleted
        d. trashed
        if isTrashed is true, then trashed timestamp must be valid.

    5. LIST_ITEM node will not be trashed, they can only be deleted. If deleted is true in the request, then back end server will
       delete this LIST_ITEM node from the database.

    6. if isChecked is valid for node type LIST_ITEM only. If it is true, then column isChecked in LIST_ITEM table will be set to true.

    7. You can only upload images of type jpeg and png only. Image size must be less than 2 MB. All the image BLOB will be stored in the ATTACHMENT
       table.

    8. If parent nodeId is set to isTrashed true, then all the child nodeIds (LIST_ITEM and BLOB) will also be set as isTrashed true.
    9. If parent nodeId is set to deleted true, then all the child nodeIds (LIST_ITEM and BLOB) will also be deleted too.



2. For DDL scripts, Please refer to DDLs.txt in entitymodel folder.